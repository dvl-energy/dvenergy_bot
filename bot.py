import logging
import os
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

TOKEN = os.getenv("TOKEN")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ —Ä–∞—Å—Ç—è–∂–∫–∏
STRETCH_STEPS = [
    "1. –î—ã—Ö–∞–Ω–∏–µ ‚Äî 2 –º–∏–Ω",
    "2. –®–µ—è ‚Äî 10x / 20 —Å–µ–∫",
    "3. –°–∫—Ä—É—Ç–∫–∞ –ª—ë–∂–∞ ‚Äî 2x30 —Å–µ–∫",
    "4. –ö–æ—à–∫–∞-–∫–æ—Ä–æ–≤–∞ ‚Äî 10 —Ä–∞–∑",
    "5. –Ø–≥–æ–¥–∏—Ü—ã + –≥—Ä—É—à–µ–≤–∏–¥–Ω–∞—è ‚Äî 30 —Å–µ–∫/—Å—Ç–æ—Ä–æ–Ω–∞",
    "6. –ù–∞–∫–ª–æ–Ω –∫ –Ω–æ–≥–∞–º ‚Äî 30 —Å–µ–∫",
    "7. –ù–æ–≥–∏ –Ω–∞ —Å—Ç–µ–Ω–µ + –¥—ã—Ö–∞–Ω–∏–µ ‚Äî 3 –º–∏–Ω"
]

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é. –í–≤–µ–¥–∏ /stretch, /offday –∏–ª–∏ /training.")

# –ö–æ–º–∞–Ω–¥–∞ /stretch —Å —á–µ–∫–ª–∏—Å—Ç–æ–º
async def stretch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(f"‚¨ú {step}", callback_data=f"stretch_{i}")]
        for i, step in enumerate(STRETCH_STEPS)
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üßò‚Äç‚ôÇÔ∏è –í–µ—á–µ—Ä–Ω—è—è —Ä–∞—Å—Ç—è–∂–∫–∞ (–æ—Ç–º–µ—á–∞–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ):", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —á–µ–∫–ª–∏—Å—Ç–∞
async def handle_stretch_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    index = int(query.data.split("_")[1])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    keyboard = []
    for i, step in enumerate(STRETCH_STEPS):
        if i == index:
            label = f"‚úÖ {step}"
        else:
            if "‚úÖ" in query.message.reply_markup.inline_keyboard[i][0].text:
                label = query.message.reply_markup.inline_keyboard[i][0].text
            else:
                label = f"‚¨ú {step}"
        keyboard.append([InlineKeyboardButton(label, callback_data=f"stretch_{i}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_reply_markup(reply_markup=reply_markup)

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stretch", stretch))
    app.add_handler(CallbackQueryHandler(handle_stretch_callback, pattern="^stretch_"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º —á–µ–∫–ª–∏—Å—Ç–æ–º –¥–ª—è —Ä–∞—Å—Ç—è–∂–∫–∏.")
    app.run_polling()

if __name__ == "__main__":
    main()
