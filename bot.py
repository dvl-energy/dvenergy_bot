import logging
import os
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

TOKEN = os.getenv("TOKEN")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
TRAINING_A = [
    "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è / —Ç—è–≥–∞ –±–ª–æ–∫–∞ ‚Äî 3x8‚Äì10",
    "–ë–æ–ª–≥–∞—Ä—Å–∫–∏–µ –ø—Ä–∏—Å–µ–¥—ã ‚Äî 3x8",
    "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ª—ë–∂–∞ ‚Äî 3x10",
    "–ì–∏–ø–µ—Ä—ç–∫—Å—Ç–µ–Ω–∑–∏—è ‚Äî 3x15",
    "–¢—è–≥–∞ –≥–∞–Ω—Ç–µ–ª–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ ‚Äî 3x10"
]

TRAINING_B = [
    "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å—Ç–æ—è ‚Äî 3x8",
    "–ì–æ–±–ª–µ—Ç-–ø—Ä–∏—Å–µ–¥ ‚Äî 3x10",
    "–Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç–∏–∫ ‚Äî 3x15",
    "–ü–æ–¥—ä—ë–º –Ω–æ–≥ –≤ –≤–∏—Å–µ ‚Äî 3x15",
    "–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π –≤–µ–ª–æ 30/30 ‚Äî 10 –º–∏–Ω"
]

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ–∫–ª–∏—Å—Ç–∞
def get_training_keyboard(training_list, completed):
    keyboard = []
    for i, item in enumerate(training_list):
        label = f"‚úÖ {item}" if i in completed else f"‚¨ú {item}"
        keyboard.append([InlineKeyboardButton(label, callback_data=f"training_{i}")])
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é. –í–≤–µ–¥–∏ /stretch, /offday –∏–ª–∏ /training.")

# –ö–æ–º–∞–Ω–¥–∞ /training
async def training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    day = datetime.now().weekday()
    if day == 0:
        context.user_data["training_type"] = "A"
        context.user_data["completed"] = set()
        keyboard = get_training_keyboard(TRAINING_A, set())
        await update.message.reply_text("üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ A. –û—Ç–º–µ—á–∞–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ:", reply_markup=keyboard)
    elif day == 3:
        context.user_data["training_type"] = "B"
        context.user_data["completed"] = set()
        keyboard = get_training_keyboard(TRAINING_B, set())
        await update.message.reply_text("üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ B. –û—Ç–º–µ—á–∞–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ:", reply_markup=keyboard)
    else:
        await update.message.reply_text("üìÖ –°–µ–≥–æ–¥–Ω—è –Ω–µ —Å–∏–ª–æ–≤–æ–π –¥–µ–Ω—å. –û—Ç–¥—ã—Ö–∞–π –∏–ª–∏ –Ω–∞–∂–º–∏ /offday")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
async def handle_training_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    index = int(query.data.split("_")[1])

    training_type = context.user_data.get("training_type")
    completed = context.user_data.get("completed", set())

    if index in completed:
        completed.remove(index)
    else:
        completed.add(index)

    context.user_data["completed"] = completed

    training_list = TRAINING_A if training_type == "A" else TRAINING_B
    keyboard = get_training_keyboard(training_list, completed)

    if len(completed) == len(training_list):
        await query.edit_message_text("‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ö—Ä–∞—Å–∞–≤—á–∏–∫ üí™")
    else:
        await query.edit_message_reply_markup(reply_markup=keyboard)

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("training", training))
    app.add_handler(CallbackQueryHandler(handle_training_callback, pattern="^training_"))

    print("–ë–æ—Ç —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()
