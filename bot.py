import logging
import os
from datetime import datetime, time
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackContext

TOKEN = os.getenv("TOKEN")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é. –í–≤–µ–¥–∏ /stretch, /offday –∏–ª–∏ /training.")

async def stretch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üßò‚Äç‚ôÇÔ∏è –í–µ—á–µ—Ä–Ω—è—è —Ä–∞—Å—Ç—è–∂–∫–∞ (15 –º–∏–Ω):\n"
        "1. –î—ã—Ö–∞–Ω–∏–µ ‚Äî 2 –º–∏–Ω\n"
        "2. –®–µ—è ‚Äî 10x / 20 —Å–µ–∫\n"
        "3. –°–∫—Ä—É—Ç–∫–∞ –ª—ë–∂–∞ ‚Äî 2x30 —Å–µ–∫\n"
        "4. –ö–æ—à–∫–∞-–∫–æ—Ä–æ–≤–∞ ‚Äî 10 —Ä–∞–∑\n"
        "5. –Ø–≥–æ–¥–∏—Ü—ã + –≥—Ä—É—à–µ–≤–∏–¥–Ω–∞—è ‚Äî 30 —Å–µ–∫/—Å—Ç–æ—Ä–æ–Ω–∞\n"
        "6. –ù–∞–∫–ª–æ–Ω –∫ –Ω–æ–≥–∞–º ‚Äî 30 —Å–µ–∫\n"
        "7. –ù–æ–≥–∏ –Ω–∞ —Å—Ç–µ–Ω–µ + –¥—ã—Ö–∞–Ω–∏–µ ‚Äî 3 –º–∏–Ω"
    )

async def offday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõå –ü–æ–ª–Ω—ã–π OFF-–¥–µ–Ω—å:\n"
        "‚úÖ –ü—Ä–æ–≥—É–ª–∫–∞ ‚Äî 30+ –º–∏–Ω\n"
        "‚úÖ –°–æ–Ω 8+ —á\n"
        "‚úÖ –í–∞–Ω–Ω–∞ / –±–∞–Ω—è\n"
        "‚úÖ –ë–µ–∑ —ç–∫—Ä–∞–Ω–∞ 3 —á–∞—Å–∞\n"
        "‚úÖ –ï–¥–∞: –±–µ–∑ —Å–∞—Ö–∞—Ä–∞, –±–æ–ª—å—à–µ –∂–∏—Ä–æ–≤\n"
        "‚úÖ –ú–µ–¥–∏—Ç–∞—Ü–∏—è / –æ—Ç–¥—ã—Ö\n"
        "‚ùå –ù–∏–∫–∞–∫–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        "‚ùå –ö–æ—Ñ–µ–∏–Ω –ø–æ—Å–ª–µ 14:00"
    )

async def training(update: Update, context: ContextTypes.DEFAULT_TYPE):
    day = datetime.now().weekday()
    if day == 0:
        await update.message.reply_text(
            "üèãÔ∏è‚Äç‚ôÇÔ∏è <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ A</b>\n"
            "- –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è / —Ç—è–≥–∞ –±–ª–æ–∫–∞ ‚Äî 3x8‚Äì10\n"
            "- –ë–æ–ª–≥–∞—Ä—Å–∫–∏–µ –ø—Ä–∏—Å–µ–¥—ã ‚Äî 3x8\n"
            "- –ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ª—ë–∂–∞ ‚Äî 3x10\n"
            "- –ì–∏–ø–µ—Ä—ç–∫—Å—Ç–µ–Ω–∑–∏—è ‚Äî 3x15\n"
            "- –¢—è–≥–∞ –≥–∞–Ω—Ç–µ–ª–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ ‚Äî 3x10", parse_mode='HTML')
    elif day == 3:
        await update.message.reply_text(
            "üèãÔ∏è‚Äç‚ôÇÔ∏è <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ B</b>\n"
            "- –ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å—Ç–æ—è ‚Äî 3x8\n"
            "- –ì–æ–±–ª–µ—Ç-–ø—Ä–∏—Å–µ–¥ ‚Äî 3x10\n"
            "- –Ø–≥–æ–¥–∏—á–Ω—ã–π –º–æ—Å—Ç–∏–∫ ‚Äî 3x15\n"
            "- –ü–æ–¥—ä—ë–º –Ω–æ–≥ –≤ –≤–∏—Å–µ ‚Äî 3x15\n"
            "- –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–π –≤–µ–ª–æ 30/30 ‚Äî 10 –º–∏–Ω", parse_mode='HTML')
    else:
        await update.message.reply_text("üìÖ –°–µ–≥–æ–¥–Ω—è –Ω–µ —Å–∏–ª–æ–≤–æ–π –¥–µ–Ω—å. –û—Ç–¥—ã—Ö–∞–π –∏–ª–∏ –Ω–∞–∂–º–∏ /offday")

async def send_evening_reminder(context: CallbackContext):
    await context.bot.send_message(chat_id=context.job.chat_id,
                                   text="üßò‚Äç‚ôÇÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–¥–µ–ª–∞–π –≤–µ—á–µ—Ä–Ω—é—é —Ä–∞—Å—Ç—è–∂–∫—É! ‚û° /stretch")

# –ó–∞–ø—É—Å–∫
async def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stretch", stretch))
    application.add_handler(CommandHandler("offday", offday))
    application.add_handler(CommandHandler("training", training))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ 21:00 –ø–æ –ú–°–ö
    moscow_utc_offset = 3  # Moscow = UTC+3
    now_utc = datetime.utcnow()
    now_msk = now_utc + timedelta(hours=moscow_utc_offset)
    reminder_time = time(21, 0)
    delta = datetime.combine(now_msk.date(), reminder_time) - now_msk
    if delta.total_seconds() < 0:
        delta += timedelta(days=1)

    application.job_queue.run_repeating(
        send_evening_reminder,
        interval=86400,
        first=delta,
        chat_id=os.getenv("CHAT_ID")  # —Ç—ã –º–æ–∂–µ—à—å –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å —ç—Ç–æ –Ω–∞ —Å–≤–æ–π chat_id
    )

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await application.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
